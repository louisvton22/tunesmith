Index: app/src/main/java/edu/ischool/lton2/tunesmith/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ischool.lton2.tunesmith\r\n\r\nimport android.app.Activity\r\nimport android.app.Application\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport androidx.appcompat.app.AlertDialog\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\n\r\nimport com.spotify.android.appremote.api.ConnectionParams;\r\nimport com.spotify.android.appremote.api.Connector;\r\nimport com.spotify.android.appremote.api.SpotifyAppRemote;\r\nimport com.spotify.android.appremote.api.error.NotLoggedInException\r\nimport com.spotify.android.appremote.api.error.UserNotAuthorizedException\r\n\r\nimport com.spotify.protocol.client.Subscription;\r\nimport com.spotify.protocol.error.SpotifyAppRemoteException\r\nimport com.spotify.protocol.types.PlayerState;\r\nimport com.spotify.protocol.types.Track;\r\n\r\n\r\nclass SpotifyConnection: Application() {\r\n    var connection: SpotifyAppRemote? = null\r\n    val clientId = \"23b30f0dcd494714b0fe85df516f4d02\"\r\n    val redirectUri = \"https://louis-ton.netlify.app/\"\r\n    private val TAG = \"SpotifyConnection\"\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        Log.i(TAG,\"Spotify Connection initialized\")\r\n    }\r\n    fun getConn() : SpotifyAppRemote? {\r\n        return connection\r\n    }\r\n}\r\nclass MainActivity : AppCompatActivity() {\r\n    private val TAG = \"MainActivity\"\r\n\r\n    //private var spotifyAppRemote: SpotifyAppRemote? = null\r\n    private val mainActivity = this\r\n    lateinit var spotifyConnection: SpotifyConnection\r\n\r\n    lateinit var bottomNav : BottomNavigationView\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        spotifyConnection = (application as SpotifyConnection)\r\n\r\n        bottomNav = findViewById<BottomNavigationView>(R.id.bottomNavigationBar)\r\n        bottomNav.setOnItemSelectedListener {\r\n            when (it.itemId) {\r\n                R.id.nav_home -> {\r\n                    val homeIntent = Intent(this, HomeActivity::class.java)\r\n                    Log.i(\"Navigation\", \"home button pressed\")\r\n                    startActivity(homeIntent)\r\n                    true\r\n                }\r\n                R.id.nav_search -> {\r\n                    val searchIntent = Intent(this, SearchActivity::class.java)\r\n                    Log.i(\"Navigation\", \"search button pressed\")\r\n                    startActivity(searchIntent)\r\n                    true\r\n                }\r\n                else -> {true}\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        findViewById<Button>(R.id.btnConnect).setOnClickListener{ authorizeUser() }\r\n        Log.i(TAG, \"Showing Auth Screen\")\r\n\r\n\r\n\r\n\r\n    }\r\n    fun handleException(error: SpotifyAppRemoteException) {\r\n        val alert = AlertDialog.Builder(this)\r\n\r\n        alert.setTitle(\"Linking Error\")\r\n        when (error) {\r\n            is NotLoggedInException -> {\r\n                alert.setMessage(\"Please Login onto the spotify\")\r\n                alert.setPositiveButton(\"Go\") { dialog, which ->\r\n                    val spotifyIntent = packageManager.getLaunchIntentForPackage(\"com.spotify.music\")\r\n                    startActivity(spotifyIntent)\r\n                    dialog.dismiss()\r\n                }\r\n                alert.setNegativeButton(\"Close\") {dialog, which ->\r\n                    dialog.dismiss()\r\n                }\r\n            }\r\n\r\n            is UserNotAuthorizedException -> {\r\n                alert.setMessage(\"Please agree to the listed terms.\")\r\n                alert.setPositiveButton(\"Retry\") { dialog, which ->\r\n                    authorizeUser()\r\n                    dialog.dismiss()\r\n                }\r\n                alert.setNegativeButton(\"Cancel\") {dialog, which ->\r\n                    dialog.dismiss()\r\n                }\r\n            }\r\n\r\n            else -> {\r\n                alert.setMessage(\"Spotify not installed. Please downlaod from the Play Store\")\r\n                alert.setPositiveButton(\"Go\") { dialog, which ->\r\n                    val intent = Intent(Intent.ACTION_VIEW)\r\n                    intent.data = Uri.parse(\"https://play.google.com/store/apps/details?id=com.spotify.music\")\r\n                    startActivity(intent)\r\n                    dialog.dismiss()\r\n                }\r\n                alert.setNegativeButton(\"Cancel\") {dialog, which ->\r\n                    dialog.dismiss()\r\n                }\r\n            }\r\n\r\n        }\r\n        alert.create().show()\r\n    }\r\n\r\n    fun authorizeUser() {\r\n        val connectionParams = ConnectionParams.Builder(spotifyConnection.clientId)\r\n            .setRedirectUri(spotifyConnection.redirectUri)\r\n            .showAuthView(true)\r\n            .build()\r\n\r\n\r\n        SpotifyAppRemote.connect(this, connectionParams, object : Connector.ConnectionListener {\r\n            override fun onConnected(p0: SpotifyAppRemote?) {\r\n                (application as SpotifyConnection).connection = p0\r\n                Log.i(TAG, \"Connection Successful\")\r\n                // TODO: send user to home screen activity\r\n                val homeIntent = Intent(mainActivity, HomeActivity::class.java)\r\n                startActivity(homeIntent)\r\n\r\n            }\r\n\r\n            override fun onFailure(p0: Throwable?) {\r\n                Log.e(TAG, \"connection failed $p0\")\r\n                handleException(p0 as SpotifyAppRemoteException)\r\n            }\r\n        })\r\n    }\r\n    private fun connected() {\r\n        // Then we will write some more code here.\r\n        (this as SpotifyConnection).getConn()?.let {\r\n            val playlistURI = \"spotify:playlist:37i9dQZF1DX2sUQwD7tbmL\"\r\n            it.playerApi.play(playlistURI)\r\n            // Subscribe to PlayerState\r\n            it.playerApi.subscribeToPlayerState().setEventCallback {\r\n                val track: Track = it.track\r\n                Log.d(\"MainActivity\", track.name + \" by \" + track.artist.name)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n\r\n        (application as SpotifyConnection).getConn()?.let {\r\n            SpotifyAppRemote.disconnect(it)\r\n        }\r\n    }\r\n}\r\n\r\ninterface NavBar {\r\n    fun setupNav(activity: Activity) {\r\n        val bottomNav = activity.findViewById<BottomNavigationView>(R.id.bottomNavigationBar)\r\n        bottomNav.setOnItemSelectedListener {\r\n            when (it.itemId) {\r\n                R.id.nav_home -> {\r\n                    val homeIntent = Intent(activity, HomeActivity::class.java)\r\n                    activity.startActivity(homeIntent)\r\n                    true\r\n                }\r\n                R.id.nav_search -> {\r\n                    val searchIntent = Intent(activity, SearchActivity::class.java)\r\n                    activity.startActivity(searchIntent)\r\n                    true\r\n                }\r\n                else -> {true}\r\n            }\r\n\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/ischool/lton2/tunesmith/MainActivity.kt b/app/src/main/java/edu/ischool/lton2/tunesmith/MainActivity.kt
--- a/app/src/main/java/edu/ischool/lton2/tunesmith/MainActivity.kt	
+++ b/app/src/main/java/edu/ischool/lton2/tunesmith/MainActivity.kt	
@@ -174,8 +174,9 @@
 }
 
 interface NavBar {
-    fun setupNav(activity: Activity) {
+    fun setupNav(activity: Activity, checkItemId: Int) {
         val bottomNav = activity.findViewById<BottomNavigationView>(R.id.bottomNavigationBar)
+        bottomNav.selectedItemId = checkItemId
         bottomNav.setOnItemSelectedListener {
             when (it.itemId) {
                 R.id.nav_home -> {
@@ -190,7 +191,6 @@
                 }
                 else -> {true}
             }
-
         }
     }
 }
\ No newline at end of file
Index: app/src/main/res/layout/playlist_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:padding=\"15dp\">\r\n\r\n    <ImageView\r\n        android:layout_width=\"300dp\"\r\n        android:layout_height=\"300dp\"\r\n        android:layout_gravity=\"center\"\r\n        android:src=\"@drawable/ic_launcher_foreground\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/titleTV\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:padding=\"8dp\"\r\n        android:paddingStart=\"0dp\"\r\n        android:text=\"Title of the playlist\"/>\r\n    <TextView\r\n        android:id=\"@+id/descriptionTV\"\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:padding=\"8dp\"\r\n        android:paddingStart=\"0dp\"\r\n        android:text=\"Description of the playlist\"/>\r\n\r\n    <ListView\r\n        android:id=\"@+id/list_view\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:dividerHeight=\"10dp\"\r\n        android:divider=\"@android:color/transparent\" />\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/playlist_view.xml b/app/src/main/res/layout/playlist_view.xml
--- a/app/src/main/res/layout/playlist_view.xml	
+++ b/app/src/main/res/layout/playlist_view.xml	
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:orientation="vertical"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
@@ -29,7 +30,8 @@
     <ListView
         android:id="@+id/list_view"
         android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:dividerHeight="10dp"
-        android:divider="@android:color/transparent" />
+        android:layout_height="207dp"
+        android:divider="@android:color/transparent"
+        android:dividerHeight="10dp" />
+
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/edu/ischool/lton2/tunesmith/PlaylistViewActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ischool.lton2.tunesmith\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.BaseAdapter\r\nimport android.widget.ListView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\n\r\nclass PlaylistViewActivity : AppCompatActivity(), NavBar {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.playlist_view)\r\n\r\n        this.setupNav(this)\r\n        val listView = findViewById<ListView>(R.id.list_view)\r\n\r\n        val playlistAdapter = PlaylistAdapter(playlistExample)\r\n\r\n        listView.adapter = playlistAdapter\r\n\r\n    }\r\n}\r\n\r\ndata class Playlist(\r\n    val name: String,\r\n    val description: String,\r\n    val image: String,\r\n    val songs: List<Song>\r\n    )\r\n\r\ndata class Song(\r\n    val title: String,\r\n    val artist: String,\r\n    val cover: String,\r\n    val length: String\r\n    )\r\n\r\nval example  = listOf<Song>(\r\n    Song (\r\n        \"song1\",\r\n        \"artist1\",\r\n        \"image1\",\r\n        \"length1\"\r\n    ),\r\n    Song (\r\n        \"song2\",\r\n        \"artist2\",\r\n        \"image2\",\r\n        \"length2\"\r\n    )\r\n)\r\n\r\nval playlistExample = Playlist (\r\n    \"playlist name\",\r\n    \"playlist description\",\r\n    \"playlist image\",\r\n    example\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/ischool/lton2/tunesmith/PlaylistViewActivity.kt b/app/src/main/java/edu/ischool/lton2/tunesmith/PlaylistViewActivity.kt
--- a/app/src/main/java/edu/ischool/lton2/tunesmith/PlaylistViewActivity.kt	
+++ b/app/src/main/java/edu/ischool/lton2/tunesmith/PlaylistViewActivity.kt	
@@ -14,7 +14,7 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.playlist_view)
 
-        this.setupNav(this)
+        this.setupNav(this, 1)
         val listView = findViewById<ListView>(R.id.list_view)
 
         val playlistAdapter = PlaylistAdapter(playlistExample)
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <application\r\n        android:name=\".SpotifyConnection\"\r\n        android:allowBackup=\"true\"\r\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\r\n        android:fullBackupContent=\"@xml/backup_rules\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.TuneSmith\"\r\n        tools:targetApi=\"31\">\r\n        <activity\r\n            android:name=\".BaseActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".HomeActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".SearchActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	
+++ b/app/src/main/AndroidManifest.xml	
@@ -16,14 +16,14 @@
         android:theme="@style/Theme.TuneSmith"
         tools:targetApi="31">
         <activity
-            android:name=".BaseActivity"
-            android:exported="false" />
+            android:name=".PlaylistViewActivity"
+            android:exported="true" />
         <activity
             android:name=".HomeActivity"
-            android:exported="false" />
+            android:exported="true" />
         <activity
             android:name=".SearchActivity"
-            android:exported="false" />
+            android:exported="true" />
         <activity
             android:name=".MainActivity"
             android:exported="true">
Index: app/src/main/java/edu/ischool/lton2/tunesmith/HomeActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ischool.lton2.tunesmith\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.core.content.edit\r\nimport androidx.recyclerview.widget.GridLayoutManager\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.spotify.sdk.android.auth.AuthorizationClient\r\nimport com.spotify.sdk.android.auth.AuthorizationRequest\r\nimport com.spotify.sdk.android.auth.AuthorizationResponse\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport org.w3c.dom.Text\r\nimport java.io.InputStreamReader\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\nimport java.util.concurrent.Executor\r\nimport java.util.concurrent.Executors\r\n\r\n\r\nclass HomeActivity : AppCompatActivity(), NavBar {\r\n    lateinit var spotifyConnection: SpotifyConnection\r\n    private val TAG = \"HomeActivity\"\r\n    private val REQUEST_CODE = 1337\r\n    val homeActivity = this\r\n    lateinit var mAccessToken: String\r\n    val networkThread = Executors.newSingleThreadExecutor()\r\n    lateinit var user: JSONObject\r\n    lateinit var sharedPref: SharedPreferences\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        spotifyConnection = (application as SpotifyConnection)\r\n        sharedPref = getSharedPreferences(\"SpotifyPrefs\", Context.MODE_PRIVATE)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_home)\r\n\r\n        this.setupNav(this)\r\n        findViewById<TextView>(R.id.txtRec).visibility = View.INVISIBLE\r\n        findViewById<TextView>(R.id.txtHistoryRec).visibility = View.INVISIBLE\r\n\r\n        var recyclerView = findViewById<RecyclerView>(R.id.recHistory)\r\n        var layoutManager = GridLayoutManager(this, 1,  LinearLayoutManager.HORIZONTAL, false)\r\n        recyclerView.layoutManager = layoutManager\r\n        recyclerView.adapter = SongAdapter(listOf())\r\n\r\n        recyclerView = findViewById<RecyclerView>(R.id.recRecommends)\r\n        layoutManager = GridLayoutManager(this, 1,  LinearLayoutManager.HORIZONTAL, false)\r\n        recyclerView.layoutManager = layoutManager\r\n        recyclerView.adapter = SongAdapter(listOf())\r\n\r\n        var builder: AuthorizationRequest.Builder = AuthorizationRequest.Builder(\r\n            spotifyConnection.clientId,\r\n            AuthorizationResponse.Type.TOKEN,\r\n            spotifyConnection.redirectUri\r\n        )\r\n\r\n        builder.setScopes(\r\n            arrayOf(\r\n                \"streaming\",\r\n                \"user-read-private\",\r\n                \"playlist-read\",\r\n                \"playlist-read-private\",\r\n                \"user-read-recently-played\"\r\n            )\r\n        )\r\n\r\n        var request: AuthorizationRequest = builder.build()\r\n\r\n        networkThread.execute {\r\n            try {\r\n                Log.i(TAG, \"opening Login Activity\")\r\n                AuthorizationClient.openLoginActivity(homeActivity, REQUEST_CODE, request)\r\n            } catch (e: Exception) {\r\n                Log.e(\"Thread\", \"Error on network thread ${e.message}\")\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        Log.i(TAG, \"onActivityResult fired.\")\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n        if (requestCode == REQUEST_CODE) {\r\n\r\n            var response: AuthorizationResponse =\r\n                AuthorizationClient.getResponse(resultCode, data)\r\n            Log.i(TAG, \"Checking request type ${response.type}\")\r\n            when (response.getType()) {\r\n                AuthorizationResponse.Type.TOKEN -> {\r\n                    sharedPref.edit {\r\n                        this.putString(\"AccessToken\", response.accessToken)\r\n                        apply()\r\n                    }\r\n                    Log.i(TAG, \"Added accesstoken to shared preferences\")\r\n                    mAccessToken = response.accessToken;\r\n                    networkThread.execute {\r\n                        try {\r\n                            getUserDetails(mAccessToken)\r\n                        } catch (e: Exception) {\r\n                        }\r\n                    }\r\n                }\r\n\r\n                AuthorizationResponse.Type.ERROR -> return\r\n                else -> return\r\n            }\r\n        }\r\n    }\r\n\r\n    fun getUserDetails(accessToken: String) {\r\n        if (!sharedPref.contains(\"User\")) {\r\n            val apiUrl = URL(\"https://api.spotify.com/v1/me\")\r\n            // val headers = mapOf(\"Authorization\" to \"Bearer $accessToken\")\r\n\r\n            val urlConnection = apiUrl.openConnection() as HttpURLConnection\r\n            Log.i(TAG, \"requesting user details ${accessToken}\")\r\n            urlConnection.setRequestProperty(\"Authorization\", \"Bearer $accessToken\")\r\n\r\n            val inputStream = urlConnection.inputStream\r\n\r\n            val reader = InputStreamReader(inputStream)\r\n\r\n            reader.use {\r\n                val details = it.readText()\r\n                Log.i(TAG, \"response details: $details\")\r\n                user = JSONObject(details)\r\n                with(sharedPref.edit()) {\r\n                    putString(\"User\", user[\"display_name\"].toString())\r\n                    Log.i(TAG, \"Added display name to shared preferences\")\r\n                    apply()\r\n                }\r\n\r\n            }\r\n        }\r\n        this.runOnUiThread {\r\n            findViewById<TextView>(R.id.txtHistoryRec).text = \"Here's what you've been listening to\"\r\n            findViewById<TextView>(R.id.txtHistoryRec).visibility = View.VISIBLE\r\n            findViewById<TextView>(R.id.txtWelcome).text =\r\n                \"Welcome, ${sharedPref.getString(\"User\", \"listener\")}\"\r\n            Log.i(TAG, \"setting up HomeUI\")\r\n        }\r\n        setupHomeUI()\r\n    }\r\n\r\n\r\n    data class Song(val name: String, val artists: String, val trackId: String)\r\n\r\n    // Set up home screen for TuneSmith\r\n    fun setupHomeUI() {\r\n            var apiUrl = URL(\"https://api.spotify.com/v1/me/player/recently-played?limit=5\")\r\n            // val headers = mapOf(\"Authorization\" to \"Bearer $accessToken\")\r\n\r\n            var urlConnection = apiUrl.openConnection() as HttpURLConnection\r\n            Log.i(TAG, \"requesting listening history details\")\r\n            urlConnection.setRequestProperty(\"Authorization\", \"Bearer ${sharedPref.getString(\"AccessToken\", \"\")}\")\r\n\r\n            var inputStream = urlConnection.inputStream\r\n\r\n            var reader  = InputStreamReader(inputStream)\r\n            var tracks: JSONArray\r\n            reader.use {\r\n                val json = JSONObject(it.readText())\r\n                Log.i(TAG, \"recently played json: $json\")\r\n                tracks = json.getJSONArray(\"items\")\r\n                Log.i(TAG, \"tracks : $tracks\")\r\n\r\n            }\r\n                var recentSongs: MutableList<Song> = mutableListOf()\r\n                for (i in 0 until tracks.length()) {\r\n                    val track = tracks.getJSONObject(i).getJSONObject(\"track\")\r\n                    Log.i(TAG, \"track name: ${track.getString(\"name\")}\")\r\n                    val song = Song(\r\n                        track.getString(\"name\"),\r\n                        track.getJSONArray(\"artists\").getJSONObject(0).getString(\"name\"),\r\n                        track.getString(\"id\")\r\n                    )\r\n                    recentSongs.add(song)\r\n\r\n                }\r\n\r\n            // inflate listen history carousel\r\n            this.runOnUiThread {\r\n                Log.i(TAG, \"inflating history carousel\")\r\n                findViewById<RecyclerView>(R.id.recHistory).adapter = SongAdapter(recentSongs)\r\n            }\r\n\r\n            // inflate recommended songs carousel\r\n\r\n            // get list of seed tracks\r\n            val seedArtists = recentSongs.joinToString(separator = \",\") {element ->\r\n                element.trackId\r\n            }\r\n            Log.i(TAG, \"$seedArtists\")\r\n            val recUrl = URL(\"https://api.spotify.com/v1/recommendations?limit=5&\" +\r\n                    \"seed_tracks=$seedArtists\")\r\n            urlConnection.disconnect()\r\n            urlConnection = recUrl.openConnection() as HttpURLConnection\r\n            Log.i(TAG, \"requesting recommended details\")\r\n            urlConnection.setRequestProperty(\"Authorization\", \"Bearer ${sharedPref.getString(\"AccessToken\", \"\")}\")\r\n\r\n            inputStream = urlConnection.inputStream\r\n            reader  = InputStreamReader(inputStream)\r\n            reader.use {\r\n            val json = JSONObject(it.readText())\r\n            Log.i(TAG, \"recommended json: $json\")\r\n            tracks = json.getJSONArray(\"tracks\")\r\n            Log.i(TAG, \"tracks : $tracks\")\r\n\r\n        }\r\n        recentSongs = mutableListOf()\r\n        for (i in 0 until tracks.length()) {\r\n            val track = tracks.getJSONObject(i)\r\n            Log.i(TAG, \"track name: ${track.getString(\"name\")}\")\r\n            val song = Song(\r\n                track.getString(\"name\"),\r\n                track.getJSONArray(\"artists\").getJSONObject(0).getString(\"name\"),\r\n                track.getString(\"id\")\r\n            )\r\n            recentSongs.add(song)\r\n\r\n        }\r\n            this.runOnUiThread {\r\n                findViewById<TextView>(R.id.txtRec).text =\r\n                    \"Here are some recommended songs based on your listening history\"\r\n                findViewById<TextView>(R.id.txtRec).visibility = View.VISIBLE\r\n                Log.i(TAG, \"inflating recommended carousel\")\r\n                findViewById<RecyclerView>(R.id.recRecommends).adapter = SongAdapter(recentSongs)\r\n            }\r\n    }\r\n\r\n    class SongAdapter(private val songs: List<Song>) : RecyclerView.Adapter<SongAdapter.ViewHolder>() {\r\n        class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n            val textTitle: TextView = itemView.findViewById(R.id.textTitle)\r\n            val textArtist: TextView = itemView.findViewById(R.id.textArtist)\r\n        }\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            val view = LayoutInflater.from(parent.context).inflate(R.layout.item_song, parent, false)\r\n            return ViewHolder(view)\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n            val song = songs[position]\r\n            holder.textArtist.text = song.artists\r\n            holder.textTitle.text = song.name\r\n        }\r\n        override fun getItemCount(): Int {\r\n            return songs.size\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/ischool/lton2/tunesmith/HomeActivity.kt b/app/src/main/java/edu/ischool/lton2/tunesmith/HomeActivity.kt
--- a/app/src/main/java/edu/ischool/lton2/tunesmith/HomeActivity.kt	
+++ b/app/src/main/java/edu/ischool/lton2/tunesmith/HomeActivity.kt	
@@ -43,7 +43,7 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_home)
 
-        this.setupNav(this)
+        this.setupNav(this, R.id.nav_home)
         findViewById<TextView>(R.id.txtRec).visibility = View.INVISIBLE
         findViewById<TextView>(R.id.txtHistoryRec).visibility = View.INVISIBLE
 
Index: app/src/main/java/edu/ischool/lton2/tunesmith/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.ischool.lton2.tunesmith\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.Menu\r\nimport androidx.appcompat.widget.SearchView\r\nimport androidx.core.view.MenuItemCompat\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView\r\n\r\nclass SearchActivity : AppCompatActivity(), NavBar {\r\n    lateinit var bottomNav : BottomNavigationView\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_search)\r\n\r\n        this.setupNav(this)\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        // Inflate menu with items using MenuInflator\r\n        val inflater = menuInflater\r\n        inflater.inflate(R.menu.top_menu, menu)\r\n\r\n        // Initialise menu item search bar\r\n        // with id and take its object\r\n        val searchViewItem = menu.findItem(R.id.search_bar)\r\n        val searchView = MenuItemCompat.getActionView(searchViewItem) as SearchView\r\n\r\n        // attach setOnQueryTextListener\r\n        // to search view defined above\r\n\r\n//        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n//            // Override onQueryTextSubmit method which is call when submit query is searched\r\n//            override fun onQueryTextSubmit(query: String): Boolean {\r\n//                // If the list contains the search query than filter the adapter\r\n//                // using the filter method with the query as its argument\r\n//                if (mylist.contains(query)) {\r\n//                    adapter.filter.filter(query)\r\n//                } else {\r\n//                    // Search query not found in List View\r\n//                    Toast.makeText(this@MainActivity, \"Not found\", Toast.LENGTH_LONG).show()\r\n//                }\r\n//                return false\r\n//            }\r\n//\r\n//            // This method is overridden to filter the adapter according\r\n//            // to a search query when the user is typing search\r\n//            override fun onQueryTextChange(newText: String): Boolean {\r\n//                adapter.filter.filter(newText)\r\n//                return false\r\n//            }\r\n//        })\r\n        return super.onCreateOptionsMenu(menu)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/ischool/lton2/tunesmith/SearchActivity.kt b/app/src/main/java/edu/ischool/lton2/tunesmith/SearchActivity.kt
--- a/app/src/main/java/edu/ischool/lton2/tunesmith/SearchActivity.kt	
+++ b/app/src/main/java/edu/ischool/lton2/tunesmith/SearchActivity.kt	
@@ -14,7 +14,7 @@
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_search)
 
-        this.setupNav(this)
+        this.setupNav(this, R.id.nav_search)
     }
 
     override fun onCreateOptionsMenu(menu: Menu): Boolean {
